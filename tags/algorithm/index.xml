<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on Xun's Blog</title><link>https://fallingxun.github.io/tags/algorithm/</link><description>Recent content in Algorithm on Xun's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Jun 2023 20:00:00 +0800</lastBuildDate><atom:link href="https://fallingxun.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>空间数据结构 — k-D Tree</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_k-d/</link><pubDate>Mon, 05 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_k-d/</guid><description>&lt;p>k-Dimensional Tree&lt;/p></description></item><item><title>空间数据结构 — 场景图</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_scenegraphs/</link><pubDate>Mon, 05 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_scenegraphs/</guid><description>&lt;p>Scene Graphs&lt;/p></description></item><item><title>空间数据结构 — 八叉树</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_octree/</link><pubDate>Sun, 04 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_octree/</guid><description>&lt;p>八叉树是基于空间划分的结构，在很多场景下能达到加速计算的效果。&lt;/p></description></item><item><title>空间数据结构 — 四叉树</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_quadtree/</link><pubDate>Sat, 03 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_quadtree/</guid><description>&lt;p>四叉树/八叉树&lt;/p></description></item><item><title>空间数据结构 — BSP</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_bsp/</link><pubDate>Fri, 02 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_bsp/</guid><description>&lt;p>Binary Space Partitioning&lt;/p></description></item><item><title>空间数据结构 — BVH</title><link>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_bvh/</link><pubDate>Thu, 01 Jun 2023 20:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/spatialdatastructures/spatialdatastructures_bvh/</guid><description>&lt;p>BVH（Bounding Volume Hierarchiy）是基于边界体积 (BV) 的结构，通过使用简单的几何形状，代替各种复杂的对象，从而加速检测效率。&lt;/p></description></item><item><title>算法篇 — KMP 字符串匹配</title><link>https://fallingxun.github.io/post/algorithm/algorithm_kmp/</link><pubDate>Sun, 25 Sep 2022 17:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/algorithm_kmp/</guid><description>&lt;p>字符串匹配，通常会使用暴力匹配算法来进行。而KMP算法是一种改进的字符串匹配算法，在字符串的匹配上通常有较好的表现。&lt;/p></description></item><item><title>算法篇 — 曲面细分（Mesh Subdivision）</title><link>https://fallingxun.github.io/post/algorithm/algorithm_meshsubdivision/</link><pubDate>Mon, 20 Jun 2022 10:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/algorithm_meshsubdivision/</guid><description>&lt;p>出于性能考虑，模型的面数一般都会有一定限制。然而，当靠近观察时，就能明显看到有很多不光滑的地方。曲面细分方法，通过将原来的面进行调整，可以使原来的面变得平滑，从而提升表现效果。&lt;/p></description></item><item><title>算法篇 — EDT 欧式距离变换</title><link>https://fallingxun.github.io/post/algorithm/algorithm_edt/</link><pubDate>Mon, 23 May 2022 15:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/algorithm_edt/</guid><description>&lt;p>距离变换是计算并标识空间点（对目标点）距离的过程，其中 EDT（Euclidean Distance Transform），欧式距离变换精度高，与实际距离相符，应用更广泛。&lt;/p></description></item><item><title>算法篇 — JPS 寻路</title><link>https://fallingxun.github.io/post/algorithm/algorithm_jps/</link><pubDate>Thu, 07 Apr 2022 14:40:00 +0800</pubDate><guid>https://fallingxun.github.io/post/algorithm/algorithm_jps/</guid><description>&lt;p>A* 寻路算法是常用的寻路方法，JPS寻路在A* 的基础上，进行跳点剪枝优化，提升了寻路性能。&lt;/p></description></item></channel></rss>