<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Xun's Blog</title><link>https://fallingxun.github.io/post/</link><description>Recent content in Posts on Xun's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 29 Mar 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://fallingxun.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Lua篇 — (4) Lua热重载</title><link>https://fallingxun.github.io/post/lua/lua_reload/</link><pubDate>Tue, 29 Mar 2022 12:00:00 +0800</pubDate><guid>https://fallingxun.github.io/post/lua/lua_reload/</guid><description>&lt;p>由于lua的弱语言特性，不需要编译即可运行，因此使用lua开发的项目，如果修改lua代码，不需要等待编译的时间，如果修改完能直接重载，则开发效率会更高。&lt;/p></description></item><item><title>Lua篇 — (3) xLua</title><link>https://fallingxun.github.io/post/lua/lua_xlua/</link><pubDate>Thu, 04 Nov 2021 09:42:00 +0800</pubDate><guid>https://fallingxun.github.io/post/lua/lua_xlua/</guid><description>&lt;p>由于很多旧项目是以CSharp开发的，热更时就会遇到难题。而xLua框架的出现，让很多项目能够在改动最小的情况下，支持热更新功能。&lt;/p></description></item><item><title>Lua篇 — (2) ToLua</title><link>https://fallingxun.github.io/post/lua/lua_tolua/</link><pubDate>Wed, 03 Nov 2021 09:42:00 +0800</pubDate><guid>https://fallingxun.github.io/post/lua/lua_tolua/</guid><description>&lt;p>ToLua是很多项目都使用的lua框架，为了更好地使用，需要对框架有比较清晰的认识。&lt;/p></description></item><item><title>Lua篇 — (1) Lua介绍</title><link>https://fallingxun.github.io/post/lua/lua_main/</link><pubDate>Sat, 23 Oct 2021 09:42:00 +0800</pubDate><guid>https://fallingxun.github.io/post/lua/lua_main/</guid><description>&lt;p>随着游戏行业的发展，热更已经成为游戏开发不可或缺的功能。热更有很多方案，lua热更是使用较广泛，也相对稳定的方案。因此，需要对lua有一定程度的了解，对于lua热更框架才能理解得更加透彻。&lt;/p></description></item><item><title>GooglePlay篇 — (3) 离线配置</title><link>https://fallingxun.github.io/post/googleplay/googleplayoffline/</link><pubDate>Wed, 07 Jul 2021 17:56:14 +1900</pubDate><guid>https://fallingxun.github.io/post/googleplay/googleplayoffline/</guid><description>&lt;p>谷歌unity的登录和IAP支付插件，很多设置需要在联网状态下进行，离线状态下，不能直接应用，需要进一步进行处理。&lt;/p></description></item><item><title>GooglePlay篇 — (2) 支付</title><link>https://fallingxun.github.io/post/googleplay/googleplaypay/</link><pubDate>Tue, 06 Jul 2021 16:55:14 +0800</pubDate><guid>https://fallingxun.github.io/post/googleplay/googleplaypay/</guid><description>&lt;p>本文档主要介绍接入Unity的IAP，来实现谷歌的支付功能。&lt;/p></description></item><item><title>GooglePlay篇 — (1) 登录</title><link>https://fallingxun.github.io/post/googleplay/googleplaylogin/</link><pubDate>Mon, 05 Jul 2021 16:54:14 +0800</pubDate><guid>https://fallingxun.github.io/post/googleplay/googleplaylogin/</guid><description>&lt;p>本文档主要是以Google Play SDK for Unity方式接入登录来说明谷歌登录的设置，主要介绍谷歌后台设置、Unity侧设置和安卓设备上的设置等相关情况&lt;/p></description></item><item><title>TMP(TextMeshPro)优化篇 — (2) 描边投影效果</title><link>https://fallingxun.github.io/post/tmp/textmeshoutline/</link><pubDate>Mon, 08 Feb 2021 09:19:01 +0800</pubDate><guid>https://fallingxun.github.io/post/tmp/textmeshoutline/</guid><description>&lt;p>TMP(TextMeshPro)比起原本使用的text，能有更丰富的字体效果表现，基于SDF的实现，可以让字体不会在放大显示后变得模糊，避免了字体贴图的突然扩张。同时，描边和投影效果也不再使用多个text偏移叠加的实现方式，能较大程度减少顶点数量和overdraw。(当前版本 &lt;a href="mailto:com.unity.textmeshpro@1.4.1">com.unity.textmeshpro@1.4.1&lt;/a>)&lt;/p></description></item><item><title>TMP(TextMeshPro)优化篇 — (1) 堆内存</title><link>https://fallingxun.github.io/post/tmp/textmeshprogcoptimize/</link><pubDate>Sun, 07 Feb 2021 15:24:08 +0800</pubDate><guid>https://fallingxun.github.io/post/tmp/textmeshprogcoptimize/</guid><description>&lt;p>TextMeshPro(TMP)是Unity的字体插件，具有很强大的功能，然而使用的过程中会发现堆内存的申请频率和大小都不低，尤其是在UI界面的使用上，每次打开界面，都会使得界面上的TMP进行初始化，随着使用时长的增加，就容易引起GC。（当前版本 &lt;a href="mailto:com.unity.textmeshpro@1.4.1">com.unity.textmeshpro@1.4.1&lt;/a>）。&lt;/p></description></item></channel></rss>